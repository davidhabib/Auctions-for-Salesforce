<!-- 
// Written by David Habib, copyright (c) 2009-2013 DJH Consulting, djhconsulting.com 
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
 -->

<apex:page docType="html-5.0" controller="AUC_CTRL_AuctionCheckOut"  title="Auction Check Out" tabStyle="Check_Out__tab" lightningStylesheets="true">

	<script src="{!URLFOR($Resource.jQueryFiles, 'jquery-3.3.1.min.js')}" />
	<script src="{!URLFOR($Resource.jQueryFiles, 'jquery-ui-1.12.1/jquery-ui.min.js')}" />
	<apex:stylesheet value="{!URLFOR($Resource.jQueryFiles, 'jquery-ui-1.12.1/jquery-ui.css')}" />
	<apex:stylesheet value="{!$Resource.AuctionCommonStylesCSS}" />

	<style>
		/* this styling adds the vertical scrollbar to our autocomplete fields */
		.ui-autocomplete-input {
			margin: 2px 0px 0 2px;
			padding: 1px;
			display: inline-block;
			vertical-align: middle !important;
		}
		.ui-autocomplete {
			max-height: 200px;
			overflow-y: auto;
			/* prevent horizontal scrollbar */
			overflow-x: hidden;
		}

		/* these styles are for the combobox dropdown button */
		.ui-button {
			margin-left: 0px;
			height: 21px;
		}
		.ui-icon {
			height: 1em;
		}
		.ui-button-icon-only .ui-button-text { padding: 0; }

		.ui-widget-content {
			background: white;
		}

		.clsWaitRight {
			background: url({!URLFOR($Resource.jQueryFiles, 'ui-anim_basic_16x16.gif')}) right center no-repeat;
		}

		.clsCombo {

		}

		.clsBtnAll {
			top: 2px;
			position:relative;
			background: ButtonFace;
			height: 1.5em;
			margin: 2px;
		}

		.panelSearch {
		}
		.panelSearch .detailList .labelCol label {
			display:block;
			width: 150px;
		}

		.panelEdit {
		}
		.panelEdit .detailList .labelCol label {
			display:inline-block;
			width: 150px;
		}

		td.sideLeft {
			width: 30%;
			min-width: 400px;
		}

		.panelSearch .detailList .data2Col {
			position: relative;
		}

		.panelEdit .detailList .data2Col {
			position: relative;
		}

		.cssLoadingPP {
			top: 60%;
		}

		.clsDTEven {
			background: white;
		}

		.clsDTOdd {
			background: AliceBlue;
		}

		.clsDTHeader  {
			background: #C0D0E5;
		}

		.bPageBlock .detailList th {
			vertical-align: middle;
		}

		.bPageBlock .detailList td {
			vertical-align: middle;
		}

		.bPageBlock .list .clsDTFooter  {
			background: white;
		}
	</style>
 
<script type="text/javascript">
    var j$ = jQuery.noConflict();
 	
    var listPurchasers = null; // our cached list of purchasers (contactId, name, bidNum) for the current Auction.
    var auctionId = "{!JSENCODE(auctionId)}"; // the current Auction.
 	
	/*******************************************************************************************************
	* this function is called when the page loads
	********************************************************************************************************/
	j$(document).ready(function() {
		myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');
	});	
	
	/*******************************************************************************************************
	* the work horse to do all jQueryUI initialization (specifically setting up the autocompletes).
	********************************************************************************************************/
	function myInitializeJQueryUI(strNamePurchaser) {
	
		// eat the enter button, to prevent it from canceling or submitting the form.
		j$(document).keydown(function(event) {
			if (event.which == 13) {
		    	event.preventDefault();
		    	event.stopPropagation();
		    	return false; // does preventDefault and stopPropagation
		  	}  
		});
		
		/*******************************************************************************************************
   	 	* setup the Purchasers autocomplete textbox
		*******************************************************************************************************/
		j$(".clsComboPurchasers").autocomplete({
			minLength: 3, // start search at 3 since bid numbers are usually 3 digits.
			delay: 500,

		   	// focus called when the user hilights an item by arrowing or mousing over the list 
		   	// we needed to override and stop this, otherwise the Id was displayed in the textbox.
		   	focus: function(event, ui) { 
		   		return false;
		   	},
	   	})
		.data("ui-autocomplete")._renderItem = function(ul, item) {
			return j$( "<li></li>" )
				.data("item.autocomplete", item)
				.append( '<div><b>' + item.label + '</b>' +
					'&nbsp;&nbsp;&nbsp;<i>' + strNull(item.bidderNumber) + '</i></div>' )
				.appendTo( ul );
		};	   	

		/*******************************************************************************************************
		* specify the specific fill function for Purchasers
		* gets all ticket holders and buyers, and filters in the browser, since the list will be small enough.
		*******************************************************************************************************/
		j$("#txtPurchasers").autocomplete("option", "source",
			function(request, response) {		
				// Gets all ticket holders, and filters in the browser, since the list will be small enough.
				// this also allows us to search by bid number which we add to the label.
				if (listPurchasers != null) {
					fillAndMatchPurchasersCombo(listPurchasers, request, response);
				} else 
					{			
	       			j$('#txtPurchasers').addClass('clsWaitRight');	        			
					GW_Auctions.AUC_CTRL_AuctionCheckOut.getListPurchasers(auctionId, '', function(result, event) {
						j$('#txtPurchasers').removeClass('clsWaitRight');	        								
		        		if (event.type == 'exception') {
		        			alert(event.message);
		        		} else {
		        			if (result != null) {
		        				listPurchasers = result;
								fillAndMatchPurchasersCombo(listPurchasers, request, response);
			        		}
		        		}
			   		}, {escape:true});		   		
		   		}
		   	}
		);	
		
		/*******************************************************************************************************
		* given the list of Purchasers, what is being searched for, and the response object,
		* fill in the response with the combo's items that match.
		*******************************************************************************************************/
		function fillAndMatchPurchasersCombo(listP, request, response) {
			var strSearch = j$.trim(request.term.toLowerCase());	
			if (strSearch == '--all--') strSearch = '';	
 			var isMatch = false;
     		response(j$.map(listP, function(item) {
     			var strLower = item.strName.toLowerCase(); 
     			var strBN = item.strBidderNumber;  
     			if (strBN == null || strBN == '') strBN = 'no bid number';		
     			
   				if (strLower.indexOf(strSearch) >= 0 || strBN.indexOf(strSearch) >= 0) {

/*** no longer do the automatch, which wasn't as appropriate when entering bid numbers.     			
	   				// if we find the exact match, get its formal text and id.
	   				// ideally, we'd select it, but I couldn't figure out how!
	   				if (strLower == strSearch || strBN == strSearch) {
	   					j$("#txtPurchasers").val(item.strName).data('Id', item.contactId);
	   					isMatch = true;
	   				}	   				
***/   				
   					return {label: item.strName, value: item.contactId, bidderNumber: item.strBidderNumber };
   				}
   			}));
   			
   			// if we don't find a match for a real search, clear the cached value.
			if (!isMatch ) {
     			j$("#txtPurchasers").data('Id', null);
			}	        														   
   			
		}

		/*******************************************************************************************************
		* specify the select event for Purchasers, so it can cause the opportunities panel to refresh.
		*******************************************************************************************************/
		j$('#txtPurchasers').autocomplete("option", "select",
			function(event, ui) {
				j$(this).val(ui.item.label + ' - ' + ui.item.bidderNumber).data('Id', ui.item.value);
	   			// call the controller to update the Purchasers panel.
	   			ChangePurchaserLookup(ui.item.value);			   		
		   		return false;		   		 
		   	}
		);

		/*******************************************************************************************************
		* specify the Change event for Purchasers, so it can update the controller to refresh the opps panel. 
		* Change called when the field is blurred (loses focus), if the value has changed;
		* ui.item refers to the selected item, if one was selected from the autocomplete menu.
		*******************************************************************************************************/
		j$('#txtPurchasers').autocomplete("option", "change",
			function(event, ui) {
				// if ui.item is provided, we already dealt with it in the select event.
				if (ui.item != null) return false;	
				
				var Id = j$(this).data('Id');
				if (Id == null && j$(this).val() != null) {
					// did the user give enough time for the search to run?
					// better go the search route!
					SearchPurchaserLookup(j$(this).val());
					return false;				
				}
				ChangePurchaserLookup(Id);
				return false;				
		   	}
		);
			
		/*******************************************************************************************************
		* setup the button for showing all items		
		*******************************************************************************************************/
		j$(".clsBtnAll" )
			.attr( "tabIndex", -1 )
			.attr( "title", "Show All Items" )
			.button({
				icons: {
					primary: "ui-icon-triangle-1-s"
				},
				text: false
			})
			.addClass( "ui-button-icon" )
			.click(function() {
				// find our input textbox to our left
				var input = j$(this).prev('input');
				if (input.autocomplete( "option", "source" ) == null) return;
				// close if already visible
				if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
					input.autocomplete( "close" );
					return;
				}
	
				// work around a bug (likely same cause as #5265)
				j$( this ).blur();
	
				// pass empty as value to search for all
				input.autocomplete( "search", "--all--" );
				input.focus();
			});	

	    // set Purchaser name
	    j$('#txtPurchasers').val(strNamePurchaser);	
	    	    
	} // end of myInitializeJQueryUI
	
	
	/*******************************************************************************************************
	* utility to deal with strings that might be null.
	*******************************************************************************************************/
	function strNull(str) {
		return (str == null ? '' : str);
	}
		
	/*******************************************************************************************************
	* prompt the user if the opportunities have not been updated
	*******************************************************************************************************/
	function areOppsUpdated(needToUpdate) {
		if (needToUpdate) {
			return (window.confirm('The Purchase Opportunities should be updated first.  Do you want to still continue?'));
		}
		return true;
	}
</script>
 	
    <apex:form styleClass="{!IF($User.UITheme == 'Theme3', '', 'slds-scope')}">
		<apex:sectionHeader title="Auction Check Out" />
        <apex:pageBlock mode="edit" title="Search by Name or Bidder Number" >
	       		<apex:actionStatus id="statusLoad" onstart="j$('#divLoading').fadeIn();" onstop="j$('#divLoading').fadeOut();" />
				<div class="cssLoading" id="divLoading" >
				  <p style="vertical-align: middle;" >
					<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." style="vertical-align: middle;"/>
					<span style="vertical-align: middle;" >Loading...</span>
				  </p>
				</div>  
			<table cellpadding="0">
			<tr>
			<td class="sideLeft" style="vertical-align:top;">			
				<apex:outputPanel id="panelSearch" styleClass="panelSearch" >				            
		            <apex:pageBlockSection columns="1"  >
			    		<apex:pageBlockSectionItem >
			    			<apex:outputLabel value="Auction" for="lbxAuctions" />
					    	<apex:selectList value="{!auctionId}" size="1" id="lbxAuctions" >
					    		<apex:actionSupport event="onchange" status="statusLoad" action="{!ChangeAuction}" 
					    			rerender="panelSearch,panelEdit,panelPurchases,panelStatus,panelButtons" 
					    			oncomplete="auctionId='{!JSENCODE(auctionId)}'; listPurchasers=null; myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" />			    			
					    		<apex:selectOptions value="{!listSOAuctions}" />
					    	</apex:selectList>	
						</apex:pageBlockSectionItem>
		                <apex:pageBlockSectionItem labelStyle="vertical-align:middle;" dataStyle="vertical-align:middle;">
				       		<apex:outputLabel value="Guest<br/>(name or bid number)" escape="false" />
			                <apex:outputPanel style="display:flex;">
							   	<input type="text" id="txtPurchasers" class="clsCombo clsComboPurchasers ui-autocomplete-input" /> 
							   	<button id="btnAll" class="clsBtnAll ui-button ui-widget ui-state-default ui-button-icon-only ui-button-icon" type="button" >&nbsp;</button>
							    <apex:actionFunction action="{!ChangePurchaserLookup}" name="ChangePurchaserLookup" status="statusLoad" 
					    			rerender="panelSearch,panelEdit,panelPurchases,panelStatus,panelButtons" 
							    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" >
							        <apex:param name="param1" assignTo="{!contactIdPurchaser}" value="" />
							    </apex:actionFunction>
							    <apex:actionFunction action="{!SearchPurchaserLookup}" name="SearchPurchaserLookup" status="statusLoad" 
					    			rerender="panelSearch,panelEdit,panelPurchases,panelStatus,panelButtons" 
							    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" >
							        <apex:param name="param1" assignTo="{!searchPurchaser}" value="" />
							    </apex:actionFunction>
			                </apex:outputPanel>
		                </apex:pageBlockSectionItem>		
					</apex:pageBlockSection>
				</apex:outputPanel>
			</td>
			<td style="veritcal-align:middle" >				
				<apex:outputPanel id="panelStatus" >	
					<apex:pageMessages />			            
		            <apex:pageMessage summary="{!strStatus}" severity="info" strength="2" escape="false" rendered="{!strStatus != null}" />  
		            <apex:messages styleClass="Error" />
				</apex:outputPanel>				   				   				            					           
			</td>            
			</tr>
			<tr>
			<td class="sideLeft" style="vertical-align:top;" colspan="2" >
				<apex:outputPanel id="panelPurchases" >
		            <apex:pageBlockSection columns="1"  >
				    	<apex:repeat var="receipt" value="{!listReceipts}">   	    	
							<apex:pageBlockTable value="{!receipt.listOppAuctionPurchases}" var="oppAP" id="tblAP" 

								footerClass="clsDTFooter"	
								rules="rows" >
		
								<apex:column >
								</apex:column>
		
								<apex:column > 
							        <apex:facet name="header">{!$ObjectType.Opportunity.Label}</apex:facet>
									<apex:outputLink value="/{!oppAP.opp.Id}"
										 rendered="{!$ObjectType.Opportunity.fields.Name.Accessible}">{!oppAP.opp.Name}</apex:outputLink>
								</apex:column>
								
								<apex:column > 
							        <apex:facet name="header">{!$ObjectType.Auction_Item__c.Label}</apex:facet>
									<apex:outputText value="{!IF(oppAP.opp.RecordType.Name=='GW Auction Ticket', 'Auction Tickets', NULLVALUE(oppAP.opp.Auction_Item_Name__c, oppAP.opp.Description))}"
										 rendered="{!$ObjectType.Opportunity.fields.Auction_Item_Name__c.Accessible}"/>
								</apex:column>
		
								<apex:column >
							        <apex:facet name="header">{!$ObjectType.Opportunity.Fields.Amount.Label}</apex:facet>
									<apex:outputText value="{0,Number,$#,###.##}" >
										<apex:param value="{!oppAP.opp.Amount}" />
									</apex:outputText>
									<apex:facet name="footer">				
										<apex:outputText value="{0,Number,$#,###.##}" escape="false" style="font-weight:bold;"
											 rendered="{!$ObjectType.Opportunity.fields.Amount.Accessible}" >
											<apex:param value="{!receipt.decTotalAmountPaid}"/> 
										</apex:outputText>								
									</apex:facet>
								</apex:column>
		
								<apex:column >
									<apex:facet name="header" >1. Pay Now</apex:facet>
									<apex:inputCheckbox value="{!oppAP.IsPayNow}" rendered="{!oppAP.opp.IsClosed == false}" required="false" immediate="false" onchange="ChangePayNow('{!oppAP.opp.Id}');" />
									<apex:outputText value="paid" rendered="{!oppAP.opp.IsClosed}" style="font-style:italic;" />
									<Apex:facet name="footer">				
										<apex:outputText value="{0,Number,$#,###.##}" escape="false" style="text-align:center; font-weight:bold;"
										 	rendered="{!$ObjectType.Opportunity.fields.Amount.Accessible}" >
											<apex:param value="{!receipt.decTotalAmountToPay}"/> 
										</apex:outputText>								
									</apex:facet>
								</apex:column>	
								 
				            	<!-- additional Opportunity fields use a fieldset -->
								<apex:repeat value="{!$ObjectType.Opportunity.FieldSets.AuctionCheckOutFS}" var="f" >
									<apex:column >
										<apex:facet name="header">{!$ObjectType.Opportunity.Fields[f].Label}</apex:facet>
				   						<apex:outputField value="{!oppAP.opp[f]}" /> 
									</apex:column>				   						
					  			</apex:repeat>                    	
																
							</apex:pageBlockTable>
						</apex:repeat>
					</apex:pageBlockSection>

		    		<apex:actionFunction action="{!ChangePayNow}" name="ChangePayNow" status="statusLoad" 
		    			rerender="panelPurchases,panelButtons,panelStatus" 
		    			oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" >
		    			 <apex:param name="param1" assignTo="{!oppIdChecked}" value="" />
		    		</apex:actionFunction>					
				</apex:outputPanel> 
			      
			    <apex:outputPanel id="panelButtons" >  

					<script>			    		
						/*******************************************************************************************************
						* utility to invoke the credit card payment processor
						* NOTE: had to locate this within the outputPanel that gets refreshed, to get the current URL formula.
						*******************************************************************************************************/
						function displayPaymentProcessor(strPaymentMethod) {
							if (strPaymentMethod == 'Check') {
								ChangePaymentMethod();
								return;
							} else if (strPaymentMethod == 'Cash') {
								ChangePaymentMethod();
								return;
							}
							else if ('{!JSENCODE(strCreditCardChargeURL)}' == '') {
								// assume they are charging the card outside of Salesforce.
								ChangePaymentMethod();
								return;
							} else if ({!decTotalAmountToPay} == 0) {
								alert('Please check which items you want to pay for, before opening the payment processor.');
								return;
							} else if ({!fShowPaymentProcessorOnPage}) {
								ShowPanelCreditCard();
								return; 
							} else { 
								ChangePaymentMethod();
								window.open('{!JSENCODE(strCreditCardChargeURL)}','','{!JSENCODE(strPaymentProcessorWindowParameters)}');
								return;
							}	
						}		
					</script>		    		

			    	<apex:actionFunction action="{!ShowPanelCreditCard}" name="ShowPanelCreditCard" status="statusLoad" 
			    		rerender="panelButtons,panelStatus" 
			    		oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');"  />			    		
			    				    	   
		            <apex:pageBlockSection title="2.  Payment Method" rendered="{!fHasReceipts}" >
		            	<apex:pageMessage severity="warning" strength="1" rendered="{!isPaymentSettingsMissing}"
		            		summary="Your Auction Settings are not filled out to specify where to store the Payment Method." />		            	
						<apex:selectRadio value="{!strPaymentMethod}" style="font-weight:bold;" onclick="displayPaymentProcessor(this.value);" >
							<apex:selectOption itemValue="Cash" itemLabel="Cash" />
							<apex:selectOption itemValue="Check" itemLabel="Check" />
							<apex:selectOption itemValue="Credit Card" itemLabel="Credit Card" />
						</apex:selectRadio>	
			    		<apex:actionFunction action="{!ChangePaymentMethod}" name="ChangePaymentMethod" status="statusLoad"  
			    			rerender="panelButtons,panelStatus" 
			    			oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" >
			    		</apex:actionFunction>																	
					
						<apex:outputPanel id="panelCheck" rendered="{!strPaymentMethod == 'Check'}" >
								<apex:outputLabel value="Check Number" style="font-weight:bold;" />&nbsp;&nbsp;&nbsp;&nbsp;
								<apex:inputText value="{!strCheckNumber}" />
						</apex:outputPanel>					
					</apex:pageBlockSection>

					<apex:outputPanel id="panelCreditCard" rendered="{!fShowPanelCreditCard}" >
							<div class="cssLoading cssLoadingPP"  >
							  <p style="vertical-align: middle; text-align:center;" >
								<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." style="vertical-align: middle;"/>
								<span style="vertical-align: middle;" >Loading Payment Processor...</span>
							  </p>
							</div>	       				
		       				<iframe id="iframePP" frameborder="0" width="95%" scrolling="auto" height="{!JSENCODE(strPaymentProcessorPageHeight)}" src="{!JSENCODE(strCreditCardChargeURL)}" />
		       				<script>
		       					j$('.cssLoadingPP').fadeIn();
		       					j$('#iframePP').load(function(){   
		       						j$('.cssLoadingPP').fadeOut();
		       					});
		       				</script>
					</apex:outputPanel>						
					<p/>
					
					<apex:pageBlockSection title="3.  Complete Processing" collapsible="false" rendered="{!fHasReceipts}" >
				    	<apex:commandButton value="Update Opportunities" action="{!UpdateCheckedOpps}" status="statusLoad"  
			    			rerender="panelButtons,panelStatus,panelPurchases" 
			    			oncomplete="myInitializeJQueryUI('{!JSENCODE(strNamePurchaser)}');" />
					</apex:pageBlockSection>					
	
					<apex:pageBlockSection title="4.  Continue" collapsible="false" rendered="{!fHasReceipts}" >
						<apex:pageBlockSectionItem >
						<apex:outputPanel >
							<apex:commandButton value="View Receipt" onclick="if (areOppsUpdated({!fOppsToUpdate})) { window.open('{!JSENCODE(strOpenReceiptURL)}'); } return false;" />&nbsp;&nbsp;
							<apex:commandButton value="Next Guest" onclick="return areOppsUpdated({!fOppsToUpdate});" action="{!NextGuest}" immediate="true" />&nbsp;&nbsp;
							<apex:commandButton value="Close" onclick="return areOppsUpdated({!fOppsToUpdate});" action="{!Close}" immediate="true" />
						</apex:outputPanel>							
						</apex:pageBlockSectionItem>							
					</apex:pageBlockSection>	
				</apex:outputPanel>		 		
			</td>
			</tr>
			</table> 
        </apex:pageBlock>       
    </apex:form>
</apex:page>