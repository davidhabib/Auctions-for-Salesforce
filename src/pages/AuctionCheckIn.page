<!-- 
// Written by David Habib, copyright (c) 2009-2013 DJH Consulting, djhconsulting.com 
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
-->

<apex:page docType="html-5.0" controller="AUC_CTRL_AuctionCheckIn"  title="Auction Check In"  tabStyle="Check_In__tab" lightningStylesheets="true">

	<script src="{!URLFOR($Resource.jQueryFiles, 'jquery-3.3.1.min.js')}" />
	<script src="{!URLFOR($Resource.jQueryFiles, 'jquery-ui-1.12.1/jquery-ui.min.js')}" />
	<apex:stylesheet value="{!URLFOR($Resource.jQueryFiles, 'jquery-ui-1.12.1/jquery-ui.css')}" />
	<apex:stylesheet value="{!$Resource.AuctionCommonStylesCSS}" />
	
	<style>
		/* this styling adds the vertical scrollbar to our autocomplete fields */
		.ui-autocomplete-input {
			margin: 2px 0px 0 2px;
			padding: 1px;
			display: inline-block;
			vertical-align: middle !important;
		}
		.ui-autocomplete {
			max-height: 200px;
			overflow-y: scroll;
			/* prevent horizontal scrollbar */
			overflow-x: hidden;
		}

		/* these styles are for the combobox dropdown button */
		.ui-button {
			margin-left: 0px;
			height: 21px;
		}
		.ui-icon {
			height: 1em;
		}
		.ui-button-icon-only .ui-button-text { padding: 0; }

		.ui-widget-content {
			background: white;
		}

		.clsWaitRight {
			background: url({!URLFOR($Resource.jQueryFiles, 'ui-anim_basic_16x16.gif')}) right center no-repeat;
		}

		.clsCombo {

		}

		.clsBtnAll {
			top: 2px;
			position:relative;
			background: ButtonFace;
			height: 1.5em;
			margin: 2px;
		}

		.clsDTEven {
			background: white;
		}

		.clsDTOdd {
			background: AliceBlue;
		}

		.clsDTHeader  {
			background: #C0D0E5;
		}

		.bPageBlock .detailList th {
			vertical-align: middle;
		}

		.bPageBlock .detailList td {
			vertical-align: middle;
		}

		.clsDTFooter  {
			background: #C0D0E5;
		}

		.hilite {
			background: yellow;
		}

		.clsAttendeeLink a {
			text-decoration: none;
		}

		.panelSearch {
		}
		.panelSearch .detailList .labelCol label {
			display:block;
			width: 150px;
		}

		.panelEdit {
		}
		.panelEdit .detailList .labelCol label {
			display:inline-block;
			width: 150px;
		}

		td.sideLeft {
			width: 30%;
			min-width: 400px;
		}

		.panelSearch .detailList .data2Col {
			position: relative;
		}

		.panelEdit .detailList .data2Col {
			position: relative;
		}

		.cssLoadingPP {
			top: 60%;
		}
	</style>

 
<script type="text/javascript">
    var j$ = jQuery.noConflict();
 	
    var listCaptains = null; // our cached list of Captains (contacts and accounts) for the current Auction.
    var auctionId = "{!JSENCODE(auctionId)}"; // the current Auction.
 	
	/*******************************************************************************************************
	* this function is called when the page loads
	********************************************************************************************************/
	j$(document).ready(function() {
		myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}', '{!JSENCODE(strNameCaptain)}');
	});	
	
	/*******************************************************************************************************
	* the work hours to do all jQueryUI initialization (specifically setting up the autocompletes).
	********************************************************************************************************/
	function myInitializeJQueryUI(strNameAttendee, strNameCaptain) {
	
		// eat the enter button, to prevent it from canceling or submitting the form.
		j$(document).keydown(function(event) {
			if (event.which == 13) {
		    	event.preventDefault();
		    	event.stopPropagation();
		    	return false; // does preventDefault and stopPropagation
		  	}  
		});
		
		/*******************************************************************************************************
   	 	* setup the Attendee autocomplete textbox
		*******************************************************************************************************/
		j$(".clsComboAttendees").autocomplete({
			minLength: 4,
			delay: 500,

		   	// focus called when the user hilights an item by arrowing or mousing over the list 
		   	// we needed to override and stop this, otherwise the Id was displayed in the textbox.
		   	focus: function(event, ui) {
		   		return false;
		   	} 
	   	})
		.data("ui-autocomplete")._renderItem = function(ul, item) {
			return j$( "<li></li>" )
				.data("item.autocomplete", item)
				.append( '<div><b>' + item.label + '</b>' +
					'&nbsp;&nbsp;&nbsp;<i>' + strNull(item.contact.MailingStreet) + 
					(strNull(item.contact.MailingStreet)=='' ? '' : ', ') + strNull(item.contact.MailingCity) + '</i></div>' )
				.appendTo( ul );
		};	   	

		/*******************************************************************************************************
		* specify the specific fill function for Attendees
		*******************************************************************************************************/
		j$("#txtAttendees").autocomplete("option", "source",
			function(request, response) {
       			j$('#txtAttendees').addClass('clsWaitRight');	        			
				var strSearch = j$.trim(request.term.toLowerCase());		
				GW_Auctions.AUC_CTRL_AuctionCheckIn.getListAttendees(auctionId, strSearch, function(result, event) {
					j$('#txtAttendees').removeClass('clsWaitRight');	        								
	        		if (event.type == 'exception') {
	        			alert(event.message);
	        		} else {
	        			if (result != null) {
							fillAndMatchAttendeesCombo(result, request, response);
		        		}
	        		}
		   		}, {escape:true});		   		
	   		}
		);	
		
		/*******************************************************************************************************
		* given the list of Attendee, what is being searched for, and the response object,
		* fill in the response with the combo's items that match.
		*******************************************************************************************************/
		function fillAndMatchAttendeesCombo(listCons, request, response) {
			var strSearch = j$.trim(request.term.toLowerCase());		
 			var isMatch = false;
     		response(j$.map(listCons, function(item) {
     			var strLower = item.Name.toLowerCase();
   				if (strLower.indexOf(strSearch) >= 0) {
	   				// if we find the exact match, get its formal text and id.
	   				// ideally, we'd select it, but I couldn't figure out how!
	   				if (strLower == strSearch) {
	   					j$("#txtAttendees").val(item.Name).data('Id', item.Id);
	   					isMatch = true;
	   				}
   					return {label: item.Name, value: item.Id, contact: item};
   				}
   			}));
   			
   			// if we don't find a match for a real search, clear the combo.
			if (!isMatch && strSearch != '') {
     			j$("#txtAttendees").data('Id', null);
			}	        														      			
		}

		/*******************************************************************************************************
		* specify the select event for Attendees, so it can update the controller to refresh the Attendee panel. 
		* Triggered when an item is selected from the menu; 
		* ui.item refers to the selected item. 
		*******************************************************************************************************/
		j$('#txtAttendees').autocomplete("option", "select",
			function(event, ui) {
				j$(this).val(ui.item.label).data('Id', ui.item.value);
	   			// call the controller to update the Attendee panel.
	   			ChangeAttendeeLookup(ui.item.value);			   		
		   		return false;		   		 
		   	}
		);
		
		/*******************************************************************************************************
		* specify the Change event for Attendees, so it can update the controller to refresh the Attendee panel. 
		* Change called when the field is blurred (loses focus), if the value has changed;
		* ui.item refers to the selected item, if one was selected from the autocomplete menu.
		*******************************************************************************************************/
		j$('#txtAttendees').autocomplete("option", "change",
			function(event, ui) {
				// if ui.item is provided, we already dealt with it in the select event.
				if (ui.item != null) return false;	
							
				var Id = j$(this).data('Id');
				if (Id == null && j$(this).val() != null && j$(this).val() != '') {
					// did the user give enough time for the search to run?
					// better go the search route!
					SearchAttendeeLookup(j$(this).val());
					return false;				
				}
				ChangeAttendeeLookup(Id);
				return false;				
		   	}
		);

		/*******************************************************************************************************
   	 	* setup the Table Captains autocomplete textbox
		*******************************************************************************************************/
		j$(".clsComboCaptains").autocomplete({
			minLength: 4,
			delay: 500,

		   	// focus called when the user hilights an item by arrowing or mousing over the list 
		   	// we needed to override and stop this, otherwise the Id was displayed in the textbox.
		   	focus: function(event, ui) {
		   		return false;
		   	}
	   	});	   	

		/*******************************************************************************************************
		* specify the specific fill function for Captains
		* gets all ticket holders, and filters in the browser, since the list will be small enough.
		*******************************************************************************************************/
		j$("#txtCaptains").autocomplete("option", "source",
			function(request, response) {		
				// Gets all ticket holders, and filters in the browser, since the list will be small enough.
				if (listCaptains != null) {
					fillAndMatchCaptainsCombo(listCaptains, request, response);
				} else {
	       			j$('#txtCaptains').addClass('clsWaitRight');	        			
					GW_Auctions.AUC_CTRL_AuctionCheckIn.getListCaptains(auctionId, '', function(result, event) {
						j$('#txtCaptains').removeClass('clsWaitRight');	        								
		        		if (event.type == 'exception') {
		        			alert(event.message);
		        		} else {
		        			if (result != null) {
		        				listCaptains = result;
								fillAndMatchCaptainsCombo(listCaptains, request, response);
			        		}
		        		}
			   		}, {escape:false});		   		
		   		}
		   	}
		);	
		
		/*******************************************************************************************************
		* given the list of contact, what is being searched for, and the response object,
		* fill in the response with the combo's items that match.
		*******************************************************************************************************/
		function fillAndMatchCaptainsCombo(listCapts, request, response) {
			var strSearch = j$.trim(request.term.toLowerCase());	
			if (strSearch == '--all--') strSearch = '';					
 			var isMatch = false;
     		response(j$.map(listCapts, function(item) {
     			var strLower = item.Name.toLowerCase();
   				if (strLower.indexOf(strSearch) >= 0) {
	   				// if we find the exact match, get its formal text and id.
	   				// ideally, we'd select it, but I couldn't figure out how!
	   				if (strLower == strSearch) {
	   					j$("#txtCaptains").val(item.Name).data('Id', item.Id);
	   					isMatch = true;
	   				}	   				
   					return {label: item.Name, value: item.Id};
   				}
   			}));
   			
   			// if we don't find a match for a real search, clear the cached value.
			if (!isMatch ) {
     			j$("#txtCaptains").data('Id', null);
			}
		}

		/*******************************************************************************************************
		* specify the select event for Captains, so it can cause the Attendee panel to refresh.
		*******************************************************************************************************/
		j$('#txtCaptains').autocomplete("option", "select",
			function(event, ui) {
				var prevId = j$(this).data('Id');
				j$(this).val(ui.item.label).data('Id', ui.item.value);
		   		if (prevId != ui.item.value) {
		   			// call the controller to update the Attendee panel.
		   			ChangeCaptainLookup(ui.item.value);			   		
			   	}
		   		return false;		   		 
		   	}
		);

		/*******************************************************************************************************
		* specify the Change event for Captains, so it can update the controller to refresh the Attendee panel. 
		* Change called when the field is blurred (loses focus), if the value has changed;
		* ui.item refers to the selected item, if one was selected from the autocomplete menu.
		*******************************************************************************************************/
		j$('#txtCaptains').autocomplete("option", "change",
			function(event, ui) {
				// if ui.item is provided, we already dealt with it in the select event.
				if (ui.item != null) return false;				
				var Id = j$(this).data('Id');
				ChangeCaptainLookup(Id);
				return false;				
		   	}
		);
			
		/*******************************************************************************************************
		* setup the button for showing all items		
		*******************************************************************************************************/
		j$(".clsBtnAll" )
			.attr( "tabIndex", -1 )
			.attr( "title", "Show All Items" )
			.button({
				icons: {
					primary: "ui-icon-triangle-1-s"
				},
				text: false
			})
			.addClass( "ui-button-icon" )
			.click(function() {
				// find our input textbox to our left
				var input = j$(this).prev('input');
				if (input.autocomplete( "option", "source" ) == null) return;
				// close if already visible
				if ( input.autocomplete( "widget" ).is( ":visible" ) ) {
					input.autocomplete( "close" );
					return;
				}
	
				// work around a bug (likely same cause as #5265)
				j$( this ).blur();
	
				// pass empty as value to search for all
				input.autocomplete( "search", "--all--" );
				input.focus();
			});	
		
		// hiliting the row on hover
	    j$(".clsDTEven, .clsDTOdd").hover(function() {
	    	j$(this).addClass("hilite");
	    }, function () {
	    	j$(this).removeClass("hilite");
	    });		

	    // set Attendee & captain names
	    j$('#txtCaptains').val(strNameCaptain);	
	    j$('#txtAttendees').val(strNameAttendee);	
	    	    
	} // end of myInitializeJQueryUI
	
	
	/*******************************************************************************************************
	* utility to deal with strings that might be null.
	*******************************************************************************************************/
	function strNull(str) {
		return (str == null ? '' : str);
	}

	/*******************************************************************************************************
	* helper function to select the specified contact from the Attendee table 
	*******************************************************************************************************/
	function selectContactIdAttendee(id, fPost) {
		var radio = j$('#radio'+id);
		if (radio != '') {
			radio.attr('checked', 'checked');
		}
		if (fPost == true) {
   			// call the controller to update the Attendee panel.
   			ChangeAttendeeLookup(id);			   		
		}
	}

	/*******************************************************************************************************
	* onClick event handler for the Attendees data table row
	*******************************************************************************************************/
	function OnDTRowClick(row) {
		var id = j$(row).find('input').first().val();
		selectContactIdAttendee(id, true);
	}
			
</script>
 	

    <apex:form styleClass="{!IF($User.UITheme == 'Theme3', '', 'slds-scope')}">
		<apex:sectionHeader title="Auction Check In" />
        <apex:pageBlock mode="edit" title="Search by Guest or Captain" >
	       		<apex:actionStatus id="statusLoad" onstart="j$('#divLoading').fadeIn();" onstop="j$('#divLoading').fadeOut();" />
				<div class="cssLoading" id="divLoading" >
				  <p style="vertical-align: middle;" >
					<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." style="vertical-align: middle;"/>
					<span class="loadingText" style="vertical-align: middle;" >Loading...</span>
				  </p>
				</div>        				            					            
			<table cellpadding="0">
			<tr>
			<td class="sideLeft" style="vertical-align:top;">			
				<apex:outputPanel id="panelSearch" styleClass="panelSearch" >				            
		            <apex:pageBlockSection columns="1"  >
			    		<apex:pageBlockSectionItem >
			    			<apex:outputLabel value="Auction" for="lbxAuctions" />
					    	<apex:selectList value="{!auctionId}" size="1" id="lbxAuctions" >
					    		<apex:actionSupport event="onchange" status="statusLoad" action="{!ChangeAuction}" 
					    			rerender="panelSearch,panelEdit,panelAttendees,panelStatus,panelCreditCard" 
					    			oncomplete="auctionId='{!JSENCODE(auctionId)}'; listCaptains=null; myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" />
					    		<apex:selectOptions value="{!listSOAuctions}" />
					    	</apex:selectList>	
						</apex:pageBlockSectionItem>
		                <apex:pageBlockSectionItem labelStyle="vertical-align:middle;" dataStyle="vertical-align:middle;">
				       		<apex:outputLabel value="Guest" />
			                <apex:outputPanel >
							   	<input type="text" id="txtAttendees" class="clsCombo clsComboAttendees ui-autocomplete-input" />            
							    <apex:actionFunction action="{!ChangeAttendeeLookup}" name="ChangeAttendeeLookup" status="statusLoad" 
					    			rerender="panelSearch,panelEdit,panelAttendees,panelStatus,panelCreditCard" 
							    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" >
							        <apex:param name="param1" assignTo="{!contactIdAttendee}" value="" />
							    </apex:actionFunction>
							    <apex:actionFunction action="{!SearchAttendeeLookup}" name="SearchAttendeeLookup" status="statusLoad" 
					    			rerender="panelSearch,panelEdit,panelAttendees,panelStatus,panelCreditCard" 
							    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" >
							        <apex:param name="param1" assignTo="{!searchAttendee}" value="" />
							    </apex:actionFunction>
			                </apex:outputPanel>
		                </apex:pageBlockSectionItem>		
		                <apex:pageBlockSectionItem labelStyle="vertical-align:middle;" dataStyle="vertical-align:middle;">
				       		<apex:outputLabel value="Table Captain<br/>(or organization)" escape="false" />
		                	<apex:outputPanel id="panelCaptains" style="display:flex;">
							   	<input type="text" id="txtCaptains" class="clsCombo clsComboCaptains ui-autocomplete-input" />
								<button id="btnCaptainsAll" class="clsBtnAll ui-button ui-widget ui-state-default ui-button-icon-only ui-button-icon" type="button" >&nbsp;</button>
							    <apex:actionFunction action="{!ChangeCaptainLookup}" name="ChangeCaptainLookup" status="statusLoad" 
					    			rerender="panelSearch,panelEdit,panelAttendees,panelStatus,panelCreditCard" 
							    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" >
							        <apex:param name="param1" assignTo="{!idCaptain}" value="" />
							    </apex:actionFunction>
			        		</apex:outputPanel>	    	        		
		                </apex:pageBlockSectionItem>
					</apex:pageBlockSection>
				</apex:outputPanel>
			</td>
			<td style="vertical-align:top;">
				<apex:outputPanel id="panelStatus" >				            
		            <apex:pageMessage summary="{!strStatus}" severity="info" strength="2" escape="false" rendered="{!strStatus != null}" />  
		            <apex:messages styleClass="Error" />
				</apex:outputPanel>
	        </td>              
			</tr>			
			<tr>
			<td class="sideLeft" style="vertical-align:top;" >
				<apex:outputPanel id="panelEdit" styleClass="panelEdit">		
		            <apex:pageBlockSection title="{!IF(attendeeEdit.con.Id != null, attendeeEdit.con.Name, 'New Contact')}" 
		            	columns="1" id="pbsEdit" collapsible="false" >		            	
		            	<!-- contact fields use a fieldset -->
						<apex:repeat value="{!$ObjectType.Contact.FieldSets.AuctionsCheckInFS}" var="f" >
		   					<apex:inputField value="{!attendeeEdit.con[f]}" required="false" />
			  			</apex:repeat>        
						<hr/>
		            	<!-- CM fields use a fieldset -->
						<apex:repeat value="{!$ObjectType.CampaignMember.FieldSets.AuctionsCheckInCMFS}" var="f" >
		   					<apex:inputField value="{!attendeeEdit.cm[f]}" required="false" />
			  			</apex:repeat>        	            	 
		            	<!-- hardcoded fields to add new ticket purchase -->
		            	<apex:pageBlockSectionItem >
		            		<apex:outputLabel value="Add Ticket Purchase" />
		            		<apex:inputCheckbox value="{!fAddTicketPurchase}" > 
					    		<apex:actionSupport event="onchange" status="statusLoad"
					    			rerender="panelSearch,panelEdit,panelAttendees,panelTicketPurchase,panelStatus,panelCreditCard" 
					    			oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" />
					    	</apex:inputCheckbox>			    			
		            	</apex:pageBlockSectionItem>
		            </apex:pageBlockSection>     	            		            
	            	<apex:outputPanel id="panelTicketPurchase" rendered="{!fAddTicketPurchase}" styleClass="panelEdit" >
			            <apex:pageBlockSection title="New Ticket Purchase" columns="1" collapsible="false" > 
			            	<!-- Ticket Opportunity fields from a fieldset -->
							<apex:repeat value="{!$ObjectType.Opportunity.FieldSets.AuctionCheckInFS}" var="f" >
			   					<apex:inputField value="{!oppTicketAttendee[f]}" required="false" />
				  			</apex:repeat>        	            	 
			            </apex:pageBlockSection>     	            		            
	                </apex:outputPanel>    		
	   				<br/>
	   				<div style="white-space:nowrap;" >
					&nbsp;&nbsp;&nbsp;&nbsp;
					<apex:commandButton value="{!IF(attendeeEdit.con.Id != null, 'Save & Check In Contact', 'Save & Check In New Contact')}" action="{!SaveAttendeeInfo}" 
						status="statusLoad"
		    			rerender="panelSearch,panelEdit,panelAttendees,panelStatus,panelCreditCard" 						
				    	oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" />&nbsp;&nbsp;
					<apex:commandButton value="Save Credit Card" rendered="{!contactIdAttendee!=null && fShowPaymentProcessorOnPage==false}" 
						onclick="if ('{!JSENCODE(strCreditCardValidateURL)}' == '') {
											alert('Please refer to the Auctions Installation and Configuration Guide to set up a payment processor.');
										} else { 
											window.open('{!JSENCODE(strCreditCardValidateURL)}','','{!JSENCODE(strPaymentProcessorWindowParameters)}');
										} 
										return false;"
					/>
					<apex:commandButton value="Save Credit Card" rendered="{!contactIdAttendee!=null && fShowPaymentProcessorOnPage}" 
						action="{!ShowPanelCreditCard}" status="statusLoad" rerender="panelCreditCard" 
						onclick="if ('{!JSENCODE(strCreditCardValidateURL)}' == '') {
								alert('Please refer to the Auctions Installation and Configuration Guide to set up a payment processor.');
								return false;}"
						oncomplete="myInitializeJQueryUI('{!JSENCODE(strNameAttendee)}','{!JSENCODE(strNameCaptain)}');" />&nbsp;&nbsp;						
					<apex:commandButton value="Next Guest" action="{!NextGuest}" immediate="true" />&nbsp;&nbsp;	
					<apex:commandButton value="Close" action="{!Close}" immediate="true" />	
					<br/><br/>														       
					</div>
					<apex:messages styleClass="Error" />					
				</apex:outputPanel>  
			</td> 
			<td style="vertical-align:top;" >
				<apex:outputPanel id="panelAttendees" >				            					            
		            <apex:pageBlockSection title="Guests" columns="1" id="pbsAttendees" rendered="{!idCaptain!=null}" collapsible="true" >
						<apex:pageBlockTable value="{!listAttendees}" var="attendee"  
							 onRowClick="OnDTRowClick(this); return false;"	 >	
							<apex:column headerValue=" " >
								<apex:outputPanel rendered="{!attendee.cm.contactId!=contactIdAttendee}" >	
									<input type="radio" name="radioGrpContact" id="radio{!attendee.cm.contactId}" value="{!attendee.cm.contactId}" 
										onclick="selectContactIdAttendee('{!JSENCODE(attendee.cm.contactId)}', true);" />
								</apex:outputPanel>
								<apex:outputPanel rendered="{!attendee.cm.contactId==contactIdAttendee}" >	
									<input type="radio" name="radioGrpContact" id="radio{!attendee.cm.contactId}" value="{!attendee.cm.contactId}" checked="checked" />
								</apex:outputPanel>
							</apex:column>														
							<apex:column >
								<apex:facet name="header">Contact</apex:facet>
								<span class="clsAttendeeLink">
									<apex:outputField value="{!attendee.cm.contactId}" rendered="{!attendee.con.Id != null}" />
									<apex:commandLink value="(available ticket)" rendered="{!attendee.con.Id == null}" />
								</span>
							</apex:column>					
			            	<!-- CM fields use a fieldset -->
							<apex:repeat value="{!$ObjectType.CampaignMember.FieldSets.AuctionsCheckInGuestsCMFS}" var="f" >
			   					<apex:column value="{!attendee.cm[f]}" /> 
				  			</apex:repeat>        	            	 
						</apex:pageBlockTable>	
		            </apex:pageBlockSection>
				</apex:outputPanel>        				
		       </td>
			</tr>
			<tr>
				<td colspan="2">				
					<apex:outputPanel id="panelCreditCard" >
						<apex:outputPanel rendered="{!fShowPanelCreditCard}" >
							<div class="cssLoading cssLoadingPP"  >
							  <p style="vertical-align: middle; text-align:center;" >
								<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." style="vertical-align: middle;"/>
								<span style="vertical-align: middle;" >Loading Payment Processor...</span>
							  </p>
							</div>	       				
		       				<iframe id="iframePP" frameborder="0" width="95%" scrolling="auto" height="{!JSENCODE(strPaymentProcessorPageHeight)}" src="{!JSENCODE(strCreditCardValidateURL)}" />
		       				<script>
		       					j$('.cssLoadingPP').fadeIn();
		       					j$('#iframePP').load(function(){  
		       						j$('.cssLoadingPP').fadeOut();
		       					});
		       				</script>
						</apex:outputPanel>
					</apex:outputPanel>										
				</td>
			</tr>
			</table>
        </apex:pageBlock>
    </apex:form>
</apex:page>