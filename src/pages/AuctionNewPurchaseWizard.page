<!-- 
// Written by David Habib, copyright (c) 2009-2013 DJH Consulting, djhconsulting.com 
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
 -->

<apex:page controller="AUC_CTRL_AuctionNewPurchaseWizard" title="Auction Purchases" tabStyle="Auction_Purchases__tab" lightningStylesheets="true">
<apex:stylesheet value="{!$Resource.AuctionCommonStylesCSS}" />

    <style>
		/* replaces datatable CellPadding which isn't supported in html5 */
        th, td {
            padding: 3px;
        }

		/* to style our dropdown button reasonably in both classic and LEX */
        input[type="button"].dropdownBtn {
            height: 1.25rem;
			width: 1.25rem;
			padding-left: 0;
			padding-right: 0;
			-webkit-appearance: none;
        }
    </style>

	<script>
	
		// eat the enter button, to prevent it from canceling or submitting the form.
		document.onkeydown = function(event) {
       		if (!event) event = window.event;	// for IE	
			if (event.keyCode == 13) { 
				// only eat it if one of our lookup listboxes doesn't have the focus.
				var target = event.target || event.srcElement;  // to handle both IE, Firefox, Chrome
				if (target.id.indexOf('lbxLookup') == -1) {
			    	if(event.preventDefault) event.preventDefault();
			    	if(event.stopPropagation) event.stopPropagation();
			    	return false; // does preventDefault and stopPropagation
			    }
		  	}
		};  
	
	
		////////////////////////// BidNumberPicker /////////////////////////////////////////////////////
		// the following functions and variables are used to implement the BidNumberPicker listbox.
		// the code has assumptions about the location of HTML elements on the page.
		// specifically, it expects these elements in the following order:
		//	<input type="hidden"> to hold the contactId.
		//  <input type="text"> to enter a bidNumber, and to display bidNumber: ContactName
		//	<input type="button"> to hide/show the BidNumberPicker listbox
		//	<div> to insert/remove the BidNumberPicker listbox into when hiding/showing it
		//		

		// global variables of the BidNumber textbox to fill and the ContactId hidden field to fill
		var ctrlTxtBidderNumber = null;
		var ctrlHiddenContactId = null;
		
		// function to invoke the BidNumberPicker and remember the fields it should update
		function OnClickBtnBidNumberPicker(btn) {
			ctrlTxtBidderNumber = GetNodePreviousSiblingTagName(btn, 'input');
			ctrlHiddenContactId = GetNodePreviousSiblingTagName(ctrlTxtBidderNumber, 'input');
			var lbx = GetElementByPartialId(btn.form, 'lbxLookupBidNumber');
			
			// if already shown, then hide the BidNumberPicker
			if (IsElementVisible(lbx)) {
				HideElement(lbx);
				ctrlTxtBidderNumber.focus();
			} else {				
				var div = GetNodeNextSiblingTagName(btn, 'div');
				div.appendChild(lbx);
				ShowElement(lbx);
				lbx.focus();
			}
		}

		// OnClick handler for the LookupBidderNumber select list
		function OnClickLbxLookupBidNumber(lbx) {
			// store the chosen info from the listbox, hide the listbox, put focus back on txtBidderNumber.
			if (ctrlTxtBidderNumber != null) ctrlTxtBidderNumber.value = lbx.options[lbx.selectedIndex].text;
			if (ctrlHiddenContactId != null) ctrlHiddenContactId.value = lbx.options[lbx.selectedIndex].value;
			HideElement(lbx);
			ctrlTxtBidderNumber.focus();
		}
		
		// OnKeypress handler for the LookupBidderNumber select list
		function OnKeyPressLbxLookupBidNumber(event, lbx) {
			if (event.keyCode == 13) {
				OnClickLbxLookupBidNumber(lbx);
				event.keyCode = null; // to prevent the page from saving
			}
		}

		// OnChange handler for when the user has manually entered a bidNumber in the BidderNumber textbox
		function OnChangeTxtBidderNumber(txt) {
			var lbx = GetElementByPartialId(txt.form, 'lbxLookupBidNumber');
			var i = IndexOfLbxPrefixText(lbx, txt.value);
			if (i == -1) {
				txt.value = txt.value + ':  invalid bid number';
			} else {				
				txt.value = lbx.options[i].text;
				ctrlHiddenContactId = GetNodePreviousSiblingTagName(txt, 'input');
				ctrlHiddenContactId.value = lbx.options[i].value;
			}
		}
		
		////////////////////////// AuctionItemPicker /////////////////////////////////////////////////////
		// the following functions and variables are used to implement the AuctionItemPicker listbox.
		// the code has assumptions about the location of HTML elements on the page.
		// specifically, it expects these elements in the following order:
		//	<input type="hidden"> to hold the AuctionItemId.
		//  <input type="text"> to enter an AuctionItemID, and to display AuctionItemID: AuctionItemName
		//	<input type="button"> to hide/show the AuctionItemPicker listbox
		//	<div> to insert/remove the AuctionItemPicker listbox into when hiding/showing it
		//		

		// global variables of the BidNumber textbox to fill and the ContactId hidden field to fill
		var ctrlTxtAuctionItem = null;
		var ctrlHiddenAuctionItemId = null;
		
		// function to invoke the BidNumberPicker and remember the fields it should update
		function OnClickBtnAuctionItemPicker(btn) {
			ctrlTxtAuctionItem = GetNodePreviousSiblingTagName(btn, 'input');
			ctrlHiddenAuctionItemId = GetNodePreviousSiblingTagName(ctrlTxtAuctionItem, 'input');
			var lbx = GetElementByPartialId(btn.form, 'lbxLookupAuctionItem');
			
			// if already shown, then hide the AuctionItemPicker
			if (IsElementVisible(lbx)) {
				HideElement(lbx);
				ctrlTxtAuctionItem.focus();
			} else {				
				var div = GetNodeNextSiblingTagName(btn, 'div');
				div.appendChild(lbx);
				ShowElement(lbx);
				lbx.focus();
			}
		}

		// OnClick handler for the LookupAuctionItem select list
		function OnClickLbxLookupAuctionItem(lbx) {
			// store the chosen info from the listbox, hide the listbox, put focus back on txtAuctionItem.
			if (ctrlTxtAuctionItem != null) ctrlTxtAuctionItem.value = lbx.options[lbx.selectedIndex].text;
			if (ctrlHiddenAuctionItemId != null) ctrlHiddenAuctionItemId.value = lbx.options[lbx.selectedIndex].value;
			HideElement(lbx);
			ctrlTxtAuctionItem.focus();
		}
		
		// OnKeypress handler for the LookupAuctionItem select list
		function OnKeyPressLbxLookupAuctionItem(event, lbx) {
			if (event.keyCode == 13) {
				OnClickLbxLookupAuctionItem(lbx);
				event.keyCode = null; // to prevent the page from saving
			}
		}
		
		// OnChange handler for when the user has manually entered an AuctionItemID in the AuctionItem textbox
		function OnChangeTxtAuctionItem(txt) {
			var lbx = GetElementByPartialId(txt.form, 'lbxLookupAuctionItem');
			var i = IndexOfLbxPrefixText(lbx, txt.value);
			if (i == -1) {
				txt.value = txt.value + ':  invalid Auction Item ID';
			} else {				
				txt.value = lbx.options[i].text;
				ctrlHiddenAuctionItemId = GetNodePreviousSiblingTagName(txt, 'input');
				ctrlHiddenAuctionItemId.value = lbx.options[i].value;
			}
		}
 	

		// function to check/uncheck paid fields when the first one is filled in.
		function OnChangeCbxPaid(cbx) {
			var rg = document.getElementsByTagName('input');
			var i = 0; 
			for (i = 0; i < rg.length; i++) {
				if (rg[i].id.indexOf('cbxPaid') > -1) {
					// if the amount field is blank, go ahead and update the checkbox.
					if (rg[i-1].value == '') {
						rg[i].checked = cbx.checked;
					}
				}
			}
 		}


		/////////////////////////////////////// Helper Functions ///////////////////////////////////////////////
		
		// helper function to find the first item in the listbox that is displaying the supplied prefix string
		function IndexOfLbxPrefixText(lbx, prefix) {
			if (prefix == null || prefix == '') return -1;
			prefix = prefix.toLowerCase();
			var i = 0; 
			for (i = 0; i < lbx.options.length; i++) { 
				var str = lbx.options[i].text.toLowerCase();
				if (str.indexOf(prefix + ':') == 0) {
					return i; 
				} 
			}
			return -1; // not found.
		}		

		// helper function to find the first item in the listbox with the specified value (not display text).
		function TextOfLbxValue(lbx, value) {
			var i = 0; 
			for (i = 0; i < lbx.options.length; i++) { 
				if (lbx.options[i].value == value) {
					return lbx.options[i].text; 
				} 
			}
			return null; 
		}		
		
		// helper function to get the previous sibling node that is an element node of the given tagName
		function GetNodePreviousSiblingTagName(n, tagName) {
			x = n.previousSibling;
			while (x != null && x.nodeType != 1 && x.tagName != tagName) { // 1 == element
				x = x.previousSibling;
			}
			return x;
		}

		// helper function to get the next sibling node that is an element node of the given tagName
		function GetNodeNextSiblingTagName(n, tagName) {
			x = n.nextSibling;
			while (x!= null && x.nodeType != 1 && x.tagName != tagName) { // 1 == element
				x = x.nextSibling;
			}
			return x;
		}
		
		// helper function to check whether an element is visible and displayed
		function IsElementVisible(element) {
			return element.style.visibility == 'visible' && element.style.display != 'none';
		}
		
		// helper function to show an element
		function ShowElement(element){
		    element.style.visibility = 'visible';
		    element.style.display = 'inline';
		    // these next two lines make the listbox a popup.
		    element.style.position = 'absolute';
		    element.style.zIndex = 99; 
		}
		
		// helper function to hide an element
		function HideElement(element){
		    element.style.visibility = 'hidden';
		    element.style.display = 'none';
		}

		// helper function to find a control whose id contains the subid
		function GetElementByPartialId(form, subid) {
			var i;
			for (i = 0; i < form.elements.length; i++) {
				if (form.elements[i].id.indexOf(subid) > -1) {
					return form.elements[i];
				}
			}
		}
		
 
	</script>

    <apex:form styleClass="{!IF($User.UITheme == 'Theme3', '', 'slds-scope')}">
		<apex:sectionHeader title="Auction Purchases" />

		<apex:outputPanel id="panelPurchases"  >
            <apex:pageMessage summary="{!strSaveResults}" severity="error" strength="2" rendered="{!auctionId==null}" />
	        <apex:pageBlock title="New Auction Purchases" rendered="{!auctionId!=null}"  mode="edit"> 
		        <apex:pageBlockButtons >
			       	<apex:commandButton action="{!createAuctionPurchases}" value="Save" reRender="panelPurchases" status="statusLoading" id="btnCreate" immediate="false" />
                	<apex:commandButton action="{!Cancel}" value="{!IF(ISNULL(strSaveResults), 'Cancel', 'Close')}"  immediate="true"/>
		        </apex:pageBlockButtons>  
		        
       			<apex:actionStatus id="statusLoading" onstart="document.getElementById('divLoading').style.display='inline';" onstop="document.getElementById('divLoading').style.display='none';" />       			
				<div class="cssLoading" id="divLoading" >
				  <p style="vertical-align: middle;" >
					<img src="/img/loading.gif" alt="Processing..." width="16" height="16" title="Processing..." style="vertical-align: middle;"/>
					<span class="loadingText" style="vertical-align: middle;" >Saving...</span>
				  </p>
				</div>        				            					            
		        
		    	<apex:outputText value="There are no attendees for this auction." rendered="{!auctionId!=null && campaignIdAuctionAttendees==null}" Style="color:red;" />
	            <apex:pageMessage summary="{!strSaveResults}" severity="info" strength="2" rendered="{!strSaveResults!=null}" />  
	            <apex:pageMessages />
		        
	 			<div class="cssTabHelpLink" id="linkHelp">
		  			<a class="helpLink" onclick="document.getElementById('linkHelp').style.display='none'; document.getElementById('divHelp').style.display='block';">
						<img src="/img/arrowRight.gif" />Show Help&nbsp;<img src="/s.gif" alt="" class="helpIcon" title=""/>
					</a>
				</div>
		   		<div id="divHelp" class="cssHelpText" style="display:none" >
		       		<div class="hideHelpLink">	       			
						<a class="helpLink" onclick="document.getElementById('divHelp').style.display='none';document.getElementById('linkHelp').style.display='block';">
							<img src="/img/arrowDown.gif" />Hide
						</a>
					</div>
					<ul>
					<li>Enter the Bid Number and Auction Item ID directly and enter Tab to have them do an auto lookup, or click on the dropdown button to choose from the list.</li>  	   		
					<li>Do not check items Paid, unless you have already received payment.</li>
					<li>You can control how many rows are displayed by using the custom setting <b>Number of Purchase Grid Rows</b></li>
					<li>You can add additional Opportunity fields to the grid using the Opportunity Field Set <b>AuctionNewPurchaseWizardFS</b></li>
					</ul>
		  		</div>
		        
		    	<!-- the hidden listbox of attendees and their bid numbers -->
		    	<apex:selectList id="lbxLookupBidNumber" size="8" onclick="OnClickLbxLookupBidNumber(this);" onkeypress="OnKeyPressLbxLookupBidNumber(event, this);" style="visibility:hidden;display:none" required="false" >
		    		<apex:selectOptions value="{!listSOLookupBidNumbers}" />
		    		<apex:selectOptions value="{!listSOLookupBidNumbers2}" />
		    	</apex:selectList>
    					
		    	<!-- the hidden listbox of auction items -->
		    	<apex:selectList id="lbxLookupAuctionItem" size="8" onclick="OnClickLbxLookupAuctionItem(this);" onkeypress="OnKeyPressLbxLookupAuctionItem(event, this);" style="visibility:hidden;display:none" required="false" >
		    		<apex:selectOptions value="{!listSOLookupAuctionItems}" />
		    		<apex:selectOptions value="{!listSOLookupAuctionItems2}" />
		    	</apex:selectList>

				<apex:dataTable value="{!listAuctionPurchasedItems}" var="apo" rules="rows">
					<apex:column >
						<apex:facet name="header">Bid Number</apex:facet>
						<apex:inputHidden value="{!apo.contactId}" id="txtHiddenContactId" required="false" />
						<apex:inputText value="{!apo.strBidderNumberAndName}" required="false" id="txtBidderNumber" onchange="OnChangeTxtBidderNumber(this);" />
						<input type="button" value="▼" onclick="OnClickBtnBidNumberPicker(this);" class="dropdownBtn"/>
						<div id="divBidNumberPicker" style="display:inline" ><br/></div>
					</apex:column> 
					<apex:column >
						<apex:facet name="header">Auction Item ID</apex:facet>
						<apex:inputHidden value="{!apo.opp.Auction_Item_Purchased__c}" id="txtHiddenAuctionItemId" required="false" />
						<apex:inputText value="{!apo.strAuctionItemIDAndName}" required="false" id="txtAuctionItem" onchange="OnChangeTxtAuctionItem(this);" />											
						<input type="button" value="▼" onclick="OnClickBtnAuctionItemPicker(this);" class="dropdownBtn" />
						<div id="divAuctionItemPicker" style="display:inline" ><br/></div>						
					</apex:column>					
					<apex:column >					
						<apex:facet name="header">Amount</apex:facet>
						<apex:inputText value="{!apo.strAmount}" required="false" style="width:80px" />
					</apex:column>
					<apex:column >
						<apex:facet name="header">Paid</apex:facet>
						<apex:inputCheckbox value="{!apo.IsPayNow}" required="false" id="cbxPaid" onchange="OnChangeCbxPaid(this);" />
					</apex:column>
					<apex:column >					
						<apex:facet name="header">Date</apex:facet>
						<apex:inputField value="{!apo.opp.CloseDate}" required="false"/>
					</apex:column>
					
	            	<!-- additional Opportunity fields use a fieldset -->
					<apex:repeat value="{!$ObjectType.Opportunity.FieldSets.AuctionNewPurchaseWizardFS}" var="f" >
						<apex:column>
							<apex:facet name="header">{!f.Label}</apex:facet>					
		   					<apex:inputField value="{!apo.opp[f]}" required="false"/>
		   				</apex:column>
		  			</apex:repeat>                    	
					
				</apex:dataTable>	
	    	</apex:pageBlock>
		</apex:outputPanel>		 
	</apex:form>    	

</apex:page>