<!-- 
// Written by David Habib, copyright (c) 2009-2013 DJH Consulting, djhconsulting.com 
// This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/
 -->

<apex:component controller="AUC_CTRL_SoqlListView" allowDml="true" access="global" >

    <style>
        .PagerUI {
			font-size: 8pt;
			padding-bottom: 10px;
            padding-top: 2px;
		}
        .SelectedAlphaFilter {
			background-color:lightblue;
		}
        .AlphaFilter { 
        	text-decoration:none;
        	padding: 0 5px; 
        }
		.container {
			padding: 10px;
		}
    </style>
    
    <script>

		// function to check/uncheck all selection checkboxes
		function OnChangeCbxSelectAll(cbx) {
			var rg = document.getElementsByTagName('input');
			var i = 0; 
			for (i = 0; i < rg.length; i++) {
				if (rg[i].id.indexOf('cbxSelect') > -1) {
					rg[i].checked = cbx.checked;
				}
			}
 		}
    
    </script>

	<apex:attribute name="pageController" type="PageControllerBase" assignTo="{!pgController}" required="true"
		description="the controller of the page" access="global" />
	<apex:attribute name="fShowCheckboxes" type="boolean" assignTo="{!showCheckboxes}" required="false"
		description="whether to have the list provide a checkbox for each item" access="global" />


	<div class="container">
		<apex:pageMessages />

		<apex:outputText value="Select the Auction:  " />
		<apex:selectList value="{!auctionId}" size="1" >
			<apex:actionSupport event="onchange" rerender="panelData" status="retrieveStatus" action="{!ChangeAuction}" />
			<apex:selectOptions value="{!listSOAuctions}" />
		</apex:selectList>
		<apex:actionStatus startText="  Loading..." stopText=" " id="retrieveStatus" startStyle="color:green; font-style:italic" /><br/><br/>

		<apex:outputPanel id="panelData" >
			<apex:pageBlock >
				<div class="PagerUI">
					<table width="100%" >
						<tr>
							<td style="vertical-align:middle;">
								<apex:panelGrid columns="10" >
									<apex:outputText value="" />
									<apex:commandLink action="{!PagingFirst}" rerender="panelData" >First</apex:commandlink>
									<apex:outputText value=" | " />
									<apex:commandLink action="{!PagingPrevious}" rerender="panelData" rendered="{!setCon.HasPrevious}">Previous</apex:commandlink>
									<apex:outputText rendered="{!setCon.HasPrevious}" value=" | " />
									<apex:commandLink action="{!PagingNext}" rerender="panelData" rendered="{!setCon.HasNext}">Next</apex:commandlink>
									<apex:outputText rendered="{!setCon.HasNext}" value=" | " />
									<apex:commandLink action="{!PagingLast}" rerender="panelData" >Last</apex:commandlink>
									<apex:outputText value="" />
									<apex:outputText value="&nbsp;&nbsp;&nbsp;Page {0} of {1} &nbsp;&nbsp;({2} records)" escape="false" >
										<apex:param value="{!setCon.PageNumber}" />
										<apex:param value="{!NumberOfPages}" />
										<apex:param value="{!NumberOfItems}" />
									</apex:outputText>
								</apex:panelGrid>
							</td>
							<td style="vertical-align:middle;">
								<apex:commandButton action="{!pgController.NewItem}" value="New" immediate="true" />
							</td>
							<td style="vertical-align:middle; text-align:right;" >
								<apex:repeat value="{!listAlphaFilters}" var="a" >
									<apex:commandLink action="{!AlphaFilter}" rerender="panelData" styleClass="AlphaFilter {!IF(strAlphaFilter=a,'SelectedAlphaFilter','')}" value="{!a}" >
										<apex:param assignTo="{!strAlphaFilter}" name="strAlphaFilter" value="{!a}" />
									</apex:commandLink>|
								</apex:repeat>
								<apex:commandLink action="{!AlphaFilter}" rerender="panelData" styleClass="AlphaFilter {!IF(strAlphaFilter='%','SelectedAlphaFilter','')}" value="All" >
									<apex:param assignTo="{!strAlphaFilter}" value="%" />
								</apex:commandLink>&nbsp;
							</td>
						</tr>
					</table>
				</div>

				<apex:pageBlockTable value="{!listPagedItem}" var="item" rows="{!cRecordsPerPage}" >

					<apex:column rendered="{!showCheckboxes}" width="10px" >
						<apex:facet name="header">
							<apex:inputCheckbox value="{!isCheckedAll}" id="cbxSelectAll" onchange="OnChangeCbxSelectAll(this);" />
						</apex:facet>
						<apex:inputCheckbox value="{!item.isChecked}" id="cbxSelect" />
					</apex:column>

					<apex:column headerValue="Action" >
						<apex:outputLink rendered="{!NOT(pgController.fEditNameField)}" value="{!URLFOR($Action[pgController.strObjectType].Edit, item.sobj.id)}">Edit</apex:outputLink>
						<!-- we don't want to assume they set the edit override on Opportunity, so for Tickets tab, use the EditItem action vs. the standard edit Action -->
                        <apex:commandLink rendered="{!pgController.fEditNameField}" action="{!EditItem}" value="Edit">
                            <apex:param assignTo="{!idEditItem}" name="idEditItem" value="{!item.sobj.id}" />
                        </apex:commandLink>
                        <apex:outputText value=" | " />
						<apex:commandLink action="{!DeleteItem}" value="Del" onclick="if (confirm('Are you sure?')==false) { return false;}" >
							<apex:param assignTo="{!idDeleteItem}" name="idDeleteItem" value="{!item.sobj.id}" />
						</apex:commandLink>
					</apex:column>

					<apex:repeat value="{!pgController.listStrFields}" var="f" >
						<apex:column >
							<apex:facet name="header">
								<apex:commandLink action="{!SortItem}" rerender="panelData" value="{!IF(pgController.strObjectType='GW_Auctions__Auction_Item__c',
									$ObjectType.Auction_Item__c.Fields[f].Label,
									$ObjectType.Opportunity.Fields[f].Label)}" >
									<apex:param assignTo="{!SortItemField}" name="SortItemField" value="{!f}" />
									<apex:outputText style="font-size:1.0em;font-weight:bold;font-family:symbol"
										value="{!IF(SortItemField=f, IF(SortItemAsc, ' ↑' , ' ↓'), '')}" escape="true" />
								</apex:commandLink>
							</apex:facet>
							<!-- special case Name field to be link to view/edit object -->
							<apex:outputField value="{!item.sobj[f]}"  rendered="{!(f <> pgController.strNameField)}" />
							<apex:outputLink value="/{!item.sobj.id}" rendered="{!(f == pgController.strNameField) && NOT(pgController.fEditNameField)}" >{!item.sobj[pgController.strNameField]}</apex:outputLink>
							<apex:commandLink action="{!EditItem}" value="{!item.sobj[pgController.strNameField]}" rendered="{!(f == pgController.strNameField) && pgController.fEditNameField}">
								<apex:param assignTo="{!idEditItem}" name="idEditItem" value="{!item.sobj.id}" />
							</apex:commandLink>
						</apex:column>
					</apex:repeat>

				</apex:pageBlockTable>
				<br/>
				<div class="PagerUI">
					<apex:panelGrid columns="10" >
						<apex:outputText value="" />
						<apex:commandLink action="{!PagingFirst}" rerender="panelData" >First</apex:commandlink>
						<apex:outputText value=" | " />
						<apex:commandLink action="{!PagingPrevious}" rerender="panelData" rendered="{!setCon.HasPrevious}">Previous</apex:commandlink>
						<apex:outputText rendered="{!setCon.HasPrevious}" value=" | " />
						<apex:commandLink action="{!PagingNext}" rerender="panelData" rendered="{!setCon.HasNext}">Next</apex:commandlink>
						<apex:outputText rendered="{!setCon.HasNext}" value=" | " />
						<apex:commandLink action="{!PagingLast}" rerender="panelData" >Last</apex:commandlink>
						<apex:outputText value="" />
						<apex:outputText value="&nbsp;&nbsp;&nbsp;Page {0} of {1} &nbsp;&nbsp;({2} records)" escape="false" >
							<apex:param value="{!setCon.PageNumber}" />
							<apex:param value="{!NumberOfPages}" />
							<apex:param value="{!NumberOfItems}" />
						</apex:outputText>
					</apex:panelGrid>
				</div>
			</apex:pageBlock>
		</apex:outputPanel>
	</div>
</apex:component>